#!/usr/bin/env node
const program = require('commander');
const crypto = require('crypto');
const fs = require('fs');
const markdown = require('../src/markdown');
const mdIds = {};
const md5Enc = str => {
    const saltStr = str + ':123';
    const md5 = crypto.createHash('md5');
    return md5.update(saltStr).digest('hex');
};

const action = {
    open: function (mdPaths) {
        if (mdPaths.length > 0) {
            for (let i = 0; i < mdPaths.length; i++) {
                const mdPath = mdPaths[i];
                const mdId = md5Enc(mdPath);
                if (fs.existsSync(mdPath)) {
                    markdown.open(mdId, mdPath).then();
                    mdIds[mdId] = mdPath;
                }
            }
        }
    },
    close: function (mdPaths) {
        if (mdPaths.length > 0) {
            for (let i = 0; i < mdPaths.length; i++) {
                const mdPath = mdPaths[i];
                const mdId = md5Enc(mdPath);
                markdown.close(mdId);
            }
        } else {
            const keys = Object.keys(mdIds);
            if (keys.length > 0) {
                keys.forEach(function (key) {
                    const mdId = mdIds[key];
                    markdown.close(mdId);
                    delete mdIds[key];
                });
            }
        }
    }
};

program
    .version(require('../package.json').version)
    .option('-o, --open <filename>', 'View markdown on your browser')
    .action(function () {
        const open = program.open;
        if (open) {
            action.open([open]);
        }
    });
program.parse(process.argv);
